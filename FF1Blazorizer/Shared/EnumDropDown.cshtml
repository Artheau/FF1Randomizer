@typeparam TItem

<div class="checkbox-cell @DisabledClass">
	<span id="@Id"class="@IndentClass @DisabledClass" onclick="@ShowToolTip"
     onmouseover="@ShowToolTip" onmouseout="@HideToolTip">@ChildContent</span>
	<select value="@Value" onchange="@onchange" disabled="@(!IsEnabled)">
		@foreach (var value in Enum.GetValues(typeof(TItem)))
		{
			<option value="@value">@(((Enum)value).ToName())</option>
		}
	</select>
</div>

@functions
{

	[Parameter]
	private TItem Value { get; set; }
	[Parameter]
	private Action<TItem> ValueChanged { get; set; }
	void onchange(UIChangeEventArgs e)
	{
		Value = (TItem)Enum.Parse(typeof(TItem), e.Value.ToString());
		ValueChanged(Value);
	}

	private void ShowToolTip(UIMouseEventArgs e)
	{
		UpdateToolTip?.Invoke(Id, e);
	}

	private void HideToolTip(UIMouseEventArgs e)
	{
		UpdateToolTip?.Invoke("", e);
	}

	[CascadingParameter]
	protected string ToolTipId { get; set; }

	[Parameter]
	protected Action<string, UIMouseEventArgs> UpdateToolTip { get; set; }


	[Parameter]
	private bool Indent { get; set; }
	private string IndentClass => Indent ? "indent" : "";

	[Parameter]
	private bool? IsEnabled { get; set; } = true;
	private string DisabledClass => (IsEnabled ?? true) ? "" : "disabled";

	[Parameter]
	private string Id { get; set; }

	[Parameter]
	private RenderFragment ChildContent { get; set; }

}
