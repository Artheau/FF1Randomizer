@inject HttpClient  Http

<div class="ffr-tooltip" style="@css">
	<button type="button" class="nes-btn is-error ffr-tooltip-close" onclick="@HideToolTip"> X </button>
	<button type="button" class="nes-btn" onclick="@HideToolTip">@Title</button>
	<div class="is-dark nes-container">
		<div class="ffr-tooltip-screenshot" style="@(ScreenshotStyle())"></div>
		<p class="ffr-tooltip-text">@Description</p>
	</div>
</div>

@functions
{
	class ToolTipObj
	{
		public string Id { get; set; }
		public string title { get; set; }
		public string description { get; set; }
		public string screenshot { get; set; }
	}

	[CascadingParameter]
	protected string ToolTipId { get; set; }

	private List<ToolTipObj> Tooltips { get; set; }
	protected override async Task OnInitAsync()
	{
		Tooltips = await Http.GetJsonAsync<List<ToolTipObj>>("/tooltips/tooltips.json");
	}

	private ToolTipObj TTip => Enabled ? Tooltips.FirstOrDefault(x => x.Id == ToolTipId) : null;
	private string Title => Enabled ? (TTip != null ? TTip.title : "no title") : "";
	private string Description => Enabled ? (TTip != null ? TTip.description : "no description") : "";
	private int Width = 800;
	private bool Enabled { get; set; } = false;
	private string Visible => (Enabled ? "visibility:visible;" : "visibility:hidden;");
	private long PosTop { get; set; } = 75;
	private long PosLeft { get; set; } = 25;
	private string css => "left:" + PosLeft + "px;top:" + PosTop + "px;" + Visible + "width: " + Width + "px;";



	private string ScreenshotStyle()
	{
		if (!Enabled || TTip == null || TTip.screenshot == null)
			return "display: none;";

		return $"background-image: url(/images/tooltips/{TTip.screenshot})";
	}

	private void ShowToolTip()
	{
		Enabled = true;
	}

	private void HideToolTip()
	{
		Enabled = false;
	}

	public async Task UpdatePos(string Id, UIMouseEventArgs e)
	{
		if (Id == "")
		{
			HideToolTip();
			StateHasChanged();
			return;
		}
		ShowToolTip();
		StateHasChanged();
	}
}
