@page "/Randomize"
@using System.ComponentModel;
@using System.IO;
@using RomUtilities;
@using FF1Lib;
@using System.Text.Json;
@using BlazorStrap
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<div class="content px-4 tinted">
    <a href="https://en.wikipedia.org/wiki/George_Floyd" style="color: yellow; font-weight: bold; font-size: 24px; display: table; margin-left: auto; margin-right: auto;">#icantbreathe</a>
	<CascadingValue Value="@ToolTipId">
		<ToolTip @ref="ToolTipElement"></ToolTip>
		<button type="button" class="@(TabClasses("File"))" @onclick="@(() => ActivateTab("File"))">File</button>
		<BSCollapse IsOpen="@(activeTabs.Contains("File"))">
			<div class="is-dark nes-container">
				<div class="row spaced-row">
					<div class="col-md-6">
						<p>@RomMessage</p>
						<input type="file" id="fileInput" @onchange="@OnFileChanged" />
					</div>
					<div class="col-md-6">
						<CheckBox UpdateToolTip="@UpdateToolTipID" Id="rememberCheckBox" @bind-Checked="RememberROM">Remember ROM</CheckBox>
						<CheckBox UpdateToolTip="@UpdateToolTipID" Id="tournamentSafeCheckBox" @bind-Checked="Flags.TournamentSafe">Tournament Safe ROM</CheckBox>
						<CheckBox UpdateToolTip="@UpdateToolTipID" Id="spoilersCheckBox" @bind-Checked="Flags.Spoilers">Generate Spoiler Log!</CheckBox>
					</div>
				</div>
				<div class="row">&nbsp;</div>
				<div class="row spaced-row">
					<div class="col-md-4">
						<p>
							Seed:
							<input type="text" style="width: calc(100% - 200px);" class="nes-input @(_seedInputClass)" id="seedInput" @onchange="@OnSeedInputChanged" value="@(_seed)" />
							<button type="button" class="nes-btn is-primary" @onclick="@OnNewSeed">New</button>
						</p>
					</div>
					<div class="col-md-8">
						<p>
							Flags:
							<input style="width: calc(100% - 300px);" type="text" class="nes-input" value="@Flags.Encoded" @onchange="@OnFlagsInputChanged" />
							<button type="button" class="nes-btn is-primary" @onclick="@OnCopyToClipboard">Export</button>
						</p>
					</div>
				</div>
				<div class="row">
					<div class="col-md-12">
						<button type="button" class="nes-btn is-primary is-huge" @onclick="@OnRandomize">Generate ROM</button>
					</div>
				</div>
				<div class="is-dark nes-container" style="margin-top: 10px;">
					<div class="row">
						<div class="col-md-12">
							@StatusMessage
						</div>
					</div>
				</div>
			</div>
		</BSCollapse>

		<button type="button" class="@(TabClasses("Presets"))" @onclick="@(() => ActivateTab("Presets"))">Presets</button>
		<BSCollapse IsOpen="@(activeTabs.Contains("Presets"))">
			<PresetsTab Flags="@Flags" SetStatusMessage="@SetStatusMessage" />
		</BSCollapse>

		<button type="button" class="@(TabClasses("Shops"))" @onclick="@(() => ActivateTab("Shops"))">Shops, Spells, RNG</button>
		<BSCollapse IsOpen=@(activeTabs.Contains("Shops"))>
			<ShopsTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
		</BSCollapse>

		<button type="button" class="@(TabClasses("Enemies"))" @onclick="@(() => ActivateTab("Enemies"))">Enemies</button>
		<BSCollapse IsOpen=@(activeTabs.Contains("Enemies"))>
			<EnemiesTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
		</BSCollapse>

		<button type="button" class="@(TabClasses("Treasures"))" @onclick="@(() => ActivateTab("Treasures"))">Treasures &amp; Incentives</button>
		<BSCollapse IsOpen="@(activeTabs.Contains("Treasures"))">
			<TreasuresTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
		</BSCollapse>

		<button type="button" class="@(TabClasses("Goal"))" @onclick="@(() => ActivateTab("Goal"))">Goal</button>
		<BSCollapse IsOpen="@(activeTabs.Contains("Goal"))">
			<GoalTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
		</BSCollapse>

		<button type="button" class="@(TabClasses("Map"))" @onclick="@(() => ActivateTab("Map"))">Maps &amp; Routing</button>
		<BSCollapse IsOpen="@(activeTabs.Contains("Map"))">
			<MapsTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
		</BSCollapse>

		<button type="button" class="@(TabClasses("Scale"))" @onclick="@(() => ActivateTab("Scale"))">Scale</button>
		<BSCollapse IsOpen="@(activeTabs.Contains("Scale"))">
			<ScaleTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
		</BSCollapse>

		<button type="button" class="@(TabClasses("Party"))" @onclick="@(() => ActivateTab("Party"))">Party</button>
		<BSCollapse IsOpen="@(activeTabs.Contains("Party"))">
			<PartyTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
		</BSCollapse>

		<button type="button" class="@(TabClasses("Conveniences"))" @onclick="@(() => ActivateTab("Conveniences"))">Conveniences</button>
		<BSCollapse IsOpen="@(activeTabs.Contains("Conveniences"))">
			<ConveniencesTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
		</BSCollapse>

		<BugFixesTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
		<ExperimentalTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" IsOpen="false" />
		<FunTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
	</CascadingValue>
</div>

@code { private byte[] _fileData;
	private FF1Rom _rom;

	private string _seed;
	private string _seedInputClass = "";

	private FlagsViewModel Flags { get; set; } = new FlagsViewModel();

	private readonly List<string> activeTabs = new List<string> { "File", "Presets", "Generate", "Shops", "Enemies", "Treasures", "Goal", "Map", "Scale", "Party", "Bug Fixes", "Conveniences", "Experimental", "Fun %" };

	private string StatusMessage = "";
	private string RomMessage = "Upload Rom:";

	private bool RememberROM = false;

	private string ToolTipId = "unupdated";
	private ToolTip ToolTipElement;

	private void UpdateToolTipID(string Id, MouseEventArgs e)
	{
		ToolTipId = Id;
		ToolTipElement.UpdatePos(ToolTipId, e);
		StateHasChanged();
	}

	void ActivateTab(string tab)
	{
		if (!activeTabs.Remove(tab))
		{
			activeTabs.Add(tab);
		}
		StateHasChanged();
	}

	string TabClasses(string tab)
	{
		return activeTabs.Contains(tab) ? "nes-btn nes-nav is-success" : "nes-btn nes-nav is-warning";
	}

	protected override async void OnInitialized()
	{
		Flags.PropertyChanged += (sender, args) => StateHasChanged();
		Flags.PropertyChanged += async (sender, args) => await SetQueryString();

		var uri = new Uri(NavigationManager.Uri);
		if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("s", out var seed))
		{
			_seed = seed.Single();
		}
		else
		{
			await OnNewSeed(null);
		}

		if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("f", out var flags))
		{
			TrySetFlags(flags.First());
		}

		await LoadLastROM();
		StateHasChanged();
	}

	async Task SetQueryString()
	{
		string[] args = new string[2] { _seed, Flags.Encoded };

		await JSRuntime.InvokeAsync<Task>("updateHistory", args);
	}



	async Task OnFileChanged(ChangeEventArgs e)
	{
		var encoded = await JSRuntime.InvokeAsync<string>("handleFileSelect", "fileInput");
		RomMessage = "Using Selected ROM.";
		SetFileData(encoded);

		if (RememberROM)
		{
			await LocalStorage.SetItemAsync("file", encoded);
		}
	}

	void SetFileData(string encoded)
	{
		_fileData = Convert.FromBase64String(encoded);
	}

	async Task OnSeedInputChanged(ChangeEventArgs e)
	{
		await ValidateSeed((string)e.Value);
	}

	async Task ValidateSeed(string seed)
	{
		if (seed == _seed)
			return;

		if (seed.Length > 8)
		{
			_seedInputClass = "is-error";
			return;
		}

		_seed = seed;
		try
		{
			Blob.FromHex(_seed);
			_seed = seed.PadLeft(8, '0');
			_seedInputClass = "";
			await SetQueryString();
		}
		catch (Exception)
		{
			_seedInputClass = "is-error";
		}
	}

	async Task OnNewSeed(MouseEventArgs e)
	{
		await ValidateSeed(Blob.Random(4).ToHex());
		StateHasChanged();
	}

	void OnCopyToClipboard(MouseEventArgs e)
	{
		StatusMessage = "URL Copied To Clipboard.";
		StateHasChanged();

		JSRuntime.InvokeAsync<object>("copyLocation");
	}

	void OnFlagsInputChanged(ChangeEventArgs e)
	{
		TrySetFlags((string)e.Value);
	}

	void TrySetFlags(string flags)
	{
		try
		{
			Flags.Flags = FF1Lib.Flags.DecodeFlagsText(flags);
			StatusMessage = "Successfully imported Flags.";
		}
		catch (Exception)
		{
			StatusMessage = "Invalid Flags String.";
		}
	}


	async Task LoadLastROM()
	{
		string encoded = await LocalStorage.GetItemAsync<string>("file");
		RememberROM = encoded != null && encoded.Length > 0;
		if (RememberROM)
		{
			SetFileData(encoded);
			RomMessage = "Using Remembered ROM.";
			StatusMessage += " Remembered last used ROM.";
		}
	}

	async Task OnRandomize(MouseEventArgs e)
	{
		if (_fileData == null)
		{
			StatusMessage = "Generate Failed: No ROM File Selected!";
			StateHasChanged();
			return;
		}

		using (var stream = new MemoryStream(_fileData))
		{
			_rom = new FF1Rom(stream);
		}

		if (RememberROM)
		{
			await LocalStorage.SetItemAsync("file", Convert.ToBase64String(_fileData));
		}
		else
		{
			await LocalStorage.RemoveItemAsync("file");
		}

		StatusMessage = "Generating Final Fantasy Randomizer ROM ... Please Wait ... ";
		StateHasChanged();

		await Task.Run(DoRandomize);
	}

	async Task DoRandomize()
	{
		Blob seed;
		try
		{
			if (_seed.Length != 8)
			{
				throw new Exception();
			}
			seed = Blob.FromHex(_seed);
		}
		catch (Exception)
		{
			StatusMessage = "Generate Failed: Invalid Seed Format";
			StateHasChanged();
			return;
		}

		try
		{

			_rom.Randomize(seed, Flags.Flags, Flags.Preferences);

			var data = new byte[512 * 1024 + 16];
			using (var stream = new MemoryStream(data, true))
			{
				_rom.Save(stream);
			}

			var encoded = Convert.ToBase64String(data);

			StatusMessage += "SUCCESS!";

			if (Flags.Spoilers)
			{
				StatusMessage += " SPOILER LOG IN BROWSER CONSOLE!";
			}

			StateHasChanged();

			await JSRuntime.InvokeAsync<object>("downloadROM", $"FFR_{_seed}_{Flags.Encoded}.nes", encoded);
		}
		catch (Exception e)
		{
			StatusMessage += "FAILURE: " + e.Message;
			StateHasChanged();
		}
	}

	void SetStatusMessage(string message)
	{
		StatusMessage = message;
		StateHasChanged();
	}
}

