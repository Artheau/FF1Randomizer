namespace FF1R
{
  using System;
  using McMaster.Extensions.CommandLineUtils;
  using RomUtilities;

  using FF1Lib;
  using FFR.Common;

  [Command(Name = "FF1R", Description = "Final Fantasy (NES) Randomizer")]
	class Program
	{
    readonly VersionInfo version = new VersionInfo(0, 1);

    public static int Main(string[] args)
      => CommandLineApplication.Execute<Program>(args);

    [Argument(0, Description = "Final Fantasy ROM to randomize")]
    [FileExists]
    public string RomPath { get; }

    [Option(Description = "File path for the generated ROM",
        ShortName = "o")]
    [LegalFilePath]
    public string OutFile { get; }

    [Option(Description = "8 Character Hexadecimal string to use as a seed",
        ShortName = "s")]
    public string Seed { get; }

    [Option("-f|--flags <FLAGS>", Description = "Base64 encoded FFR flag string")]
    public string FlagString { get; }

    // Will take precedence over the above Seed and Flags if present. 
    [Option(Description = "SEED_FLAGS string, as generated by crimbot",
      ShortName = "i")]
    public string Import { get; }

    [Option("--presets", Description = "List available presets",
      ShortName = "l")]
    public bool ListPresets { get; }

    [Option(Description = "Enable verbose output",
        ShortName = "v")]
    public bool Verbose { get; }

    [Option("--version", Description = "Show version")]
    public bool Version { get; }

    int OnExecute(IConsole console)
    {
      if (Version) {
        console.WriteLine(version);
        return 0;
      }

      if (ListPresets) {
        foreach(var name in Presets.List())
          console.WriteLine(name);
        return 0;
      }

      RandomizerSettings settings;
      try {
        settings = String.IsNullOrEmpty(Import)
          ? new RandomizerSettings(Seed, FlagString)
          : RandomizerSettings.FromImportString(Import);
      } catch {
        console.WriteLine("Ensure that you are using an 8 character ");
        console.WriteLine("hexadecimal string as a seed and a valid");
        console.WriteLine("base64 encoded set of flags.");
        return 1;
      }

      var outFile = String.IsNullOrEmpty(OutFile)
        ? GenerateDefaultFilename(RomPath, settings)
        : OutFile;
      
      var rom = new FF1Rom(RomPath);
      rom.Randomize(settings.Seed, settings.Flags);
      rom.Save(outFile);

      if (Verbose) {
        console.WriteLine($"Seed: {settings.Seed.ToHex()}");
        console.WriteLine($"Flags: {Flags.EncodeFlagsText(settings.Flags)}");
        console.WriteLine($"ROM created at: {outFile}");
      }

      return 0;
    }

    string GenerateDefaultFilename(string rom, RandomizerSettings settings)
    {
			var baseName = rom.Substring(0, rom.LastIndexOf(".", StringComparison.InvariantCulture));
			return $"{baseName}_{settings.SeedString}_{settings.FlagString}.nes";
    }
  }
}
